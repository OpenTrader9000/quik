// generated by ddl/source\ddl2cpp.py ddl/source/unhandled.sql ddl/source/../generated/unhandled gentab
#ifndef GENTAB_UNHANDLED_H
#define GENTAB_UNHANDLED_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace gentab
{
  namespace Unhandled_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Ts
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ts";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ts;
            T& operator()() { return ts; }
            const T& operator()() const { return ts; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Body
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "body";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T body;
            T& operator()() { return body; }
            const T& operator()() const { return body; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct Unhandled: sqlpp::table_t<Unhandled,
               Unhandled_::Id,
               Unhandled_::Type,
               Unhandled_::Name,
               Unhandled_::Ts,
               Unhandled_::Body>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "unhandled";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T unhandled;
        T& operator()() { return unhandled; }
        const T& operator()() const { return unhandled; }
      };
    };
  };
} // namespace gentab
#endif
