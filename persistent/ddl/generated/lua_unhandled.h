// generated by C:\Users\Andrey\Documents\Visual Studio 2017\Projects\quik\persistent\ddl\source\ddl2cpp.py lua_unhandled.sql ../generated/lua_unhandled gentab
#ifndef GENTAB_LUA_UNHANDLED_H
#define GENTAB_LUA_UNHANDLED_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace gentab
{
  namespace LuaUnhandled_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct FunctionName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "function_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T functionName;
            T& operator()() { return functionName; }
            const T& operator()() const { return functionName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Ts
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ts";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ts;
            T& operator()() { return ts; }
            const T& operator()() const { return ts; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Dump
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dump";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dump;
            T& operator()() { return dump; }
            const T& operator()() const { return dump; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct LuaUnhandled: sqlpp::table_t<LuaUnhandled,
               LuaUnhandled_::Id,
               LuaUnhandled_::FunctionName,
               LuaUnhandled_::Ts,
               LuaUnhandled_::Dump>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "lua_unhandled";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T luaUnhandled;
        T& operator()() { return luaUnhandled; }
        const T& operator()() const { return luaUnhandled; }
      };
    };
  };
} // namespace gentab
#endif
